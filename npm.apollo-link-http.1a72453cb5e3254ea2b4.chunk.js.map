{"version":3,"sources":["webpack://react-template/./node_modules/apollo-link-http/lib/httpLink.js","webpack://react-template/./node_modules/apollo-link-http/lib/index.js"],"names":["Object","defineProperty","exports","value","tslib_1","apollo_link_1","apollo_link_http_common_1","createHttpLink","linkOptions","_a","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","__rest","checkFetcher","linkConfig","http","options","fetchOptions","credentials","headers","ApolloLink","operation","chosenURI","selectURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","controller","contextHeaders","__assign","contextConfig","_b","selectHttpOptionsAndBody","fallbackHttpConfig","body","signal","_c","createSignalIfSupported","_controller","query","definitions","some","d","kind","method","_d","queryParams","addQueryParam","key","push","encodeURIComponent","operationName","variables","serializedVariables","serializeFetchParameter","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join","rewriteURIForGET","fromError","Observable","observer","then","response","setContext","parseAndCheckHttpResponse","result","next","complete","catch","err","errors","data","error","abort","HttpLink","_super","opts","call","this","request","__extends","__exportStar"],"mappings":"gHACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAIC,EAAU,EAAQ,OAClBC,EAAgB,EAAQ,OACxBC,EAA4B,EAAQ,OACxCJ,EAAQK,eAAiB,SAAUC,QACX,IAAhBA,IAA0BA,EAAc,IAC5C,IAAIC,EAAKD,EAAYE,IAAKA,OAAa,IAAPD,EAAgB,WAAaA,EAAIE,EAAUH,EAAYI,MAAOC,EAAoBL,EAAYK,kBAAmBC,EAAmBN,EAAYM,iBAAkBC,EAAiBX,EAAQY,OAAOR,EAAa,CAAC,MAAO,QAAS,oBAAqB,qBACrRF,EAA0BW,aAAaN,GAClCA,IACDA,EAAUC,OAEd,IAAIM,EAAa,CACbC,KAAM,CAAEN,kBAAmBA,GAC3BO,QAASL,EAAeM,aACxBC,YAAaP,EAAeO,YAC5BC,QAASR,EAAeQ,SAE5B,OAAO,IAAIlB,EAAcmB,YAAW,SAAUC,GAC1C,IAAIC,EAAYpB,EAA0BqB,UAAUF,EAAWf,GAC3DkB,EAAUH,EAAUI,aACpBC,EAAyB,GAC7B,GAAIF,EAAQG,gBAAiB,CACzB,IAAItB,EAAKmB,EAAQG,gBAAiBC,EAASvB,EAAGwB,KAAMC,EAAUzB,EAAGyB,QAC7DF,IACAF,EAAuB,6BAA+BE,GAEtDE,IACAJ,EAAuB,gCAAkCI,GAGjE,IAQIC,EARAC,EAAiBhC,EAAQiC,SAAS,GAAIP,EAAwBF,EAAQL,SACtEe,EAAgB,CAChBnB,KAAMS,EAAQT,KACdC,QAASQ,EAAQP,aACjBC,YAAaM,EAAQN,YACrBC,QAASa,GAETG,EAAKjC,EAA0BkC,yBAAyBf,EAAWnB,EAA0BmC,mBAAoBvB,EAAYoB,GAAgBlB,EAAUmB,EAAGnB,QAASsB,EAAOH,EAAGG,KAEjL,IAAKtB,EAAQuB,OAAQ,CACjB,IAAIC,EAAKtC,EAA0BuC,0BAA2BC,EAAcF,EAAGT,WAAYQ,EAASC,EAAGD,QACvGR,EAAaW,KAET1B,EAAQuB,OAASA,GASzB,GAJI7B,IACCW,EAAUsB,MAAMC,YAAYC,MAJN,SAAUC,GACjC,MAAkB,wBAAXA,EAAEC,MAAkD,aAAhBD,EAAEzB,eAI7CL,EAAQgC,OAAS,OAEE,QAAnBhC,EAAQgC,OAAkB,CAC1B,IAAIC,EAyChB,SAA0B3B,EAAWgB,GACjC,IAAIY,EAAc,GACdC,EAAgB,SAAUC,EAAKrD,GAC/BmD,EAAYG,KAAKD,EAAM,IAAME,mBAAmBvD,KAEhD,UAAWuC,GACXa,EAAc,QAASb,EAAKK,OAE5BL,EAAKiB,eACLJ,EAAc,gBAAiBb,EAAKiB,eAExC,GAAIjB,EAAKkB,UAAW,CAChB,IAAIC,OAAsB,EAC1B,IACIA,EAAsBvD,EAA0BwD,wBAAwBpB,EAAKkB,UAAW,iBAE5F,MAAOG,GACH,MAAO,CAAEA,WAAYA,GAEzBR,EAAc,YAAaM,GAE/B,GAAInB,EAAKsB,WAAY,CACjB,IAAIC,OAAuB,EAC3B,IACIA,EAAuB3D,EAA0BwD,wBAAwBpB,EAAKsB,WAAY,kBAE9F,MAAOD,GACH,MAAO,CAAEA,WAAYA,GAEzBR,EAAc,aAAcU,GAEhC,IAAIC,EAAW,GAAIC,EAAczC,EAC7B0C,EAAgB1C,EAAU2C,QAAQ,MACf,IAAnBD,IACAF,EAAWxC,EAAU4C,OAAOF,GAC5BD,EAAczC,EAAU4C,OAAO,EAAGF,IAEtC,IAAIG,GAAkD,IAA9BJ,EAAYE,QAAQ,KAAc,IAAM,IAEhE,MAAO,CAAEG,OADIL,EAAcI,EAAoBjB,EAAYmB,KAAK,KAAOP,GA/EtDQ,CAAiBhD,EAAWgB,GAAO8B,EAASnB,EAAGmB,OAAQT,EAAaV,EAAGU,WAChF,GAAIA,EACA,OAAO1D,EAAcsE,UAAUZ,GAEnCrC,EAAY8C,OAGZ,IACIpD,EAAQsB,KAAOpC,EAA0BwD,wBAAwBpB,EAAM,WAE3E,MAAOqB,GACH,OAAO1D,EAAcsE,UAAUZ,GAGvC,OAAO,IAAI1D,EAAcuE,YAAW,SAAUC,GAoB1C,OAnBAlE,EAAQe,EAAWN,GACd0D,MAAK,SAAUC,GAEhB,OADAtD,EAAUuD,WAAW,CAAED,SAAUA,IAC1BA,KAEND,KAAKxE,EAA0B2E,0BAA0BxD,IACzDqD,MAAK,SAAUI,GAGhB,OAFAL,EAASM,KAAKD,GACdL,EAASO,WACFF,KAENG,OAAM,SAAUC,GACA,eAAbA,EAAIrD,OAEJqD,EAAIJ,QAAUI,EAAIJ,OAAOK,QAAUD,EAAIJ,OAAOM,MAC9CX,EAASM,KAAKG,EAAIJ,QAEtBL,EAASY,MAAMH,OAEZ,WACCnD,GACAA,EAAWuD,gBA8C/B,IAAIC,EAAY,SAAUC,GAEtB,SAASD,EAASE,GACd,OAAOD,EAAOE,KAAKC,KAAM7F,EAAQK,eAAesF,GAAMG,UAAYD,KAEtE,OAJA3F,EAAQ6F,UAAUN,EAAUC,GAIrBD,EALI,CAMbtF,EAAcmB,YAChBtB,EAAQyF,SAAWA,G,6BC9InB3F,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACxC,EAAQ,OACd+F,aAAa,EAAQ,OAAehG","file":"npm.apollo-link-http.1a72453cb5e3254ea2b4.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar apollo_link_1 = require(\"apollo-link\");\nvar apollo_link_http_common_1 = require(\"apollo-link-http-common\");\nexports.createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = tslib_1.__rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    apollo_link_http_common_1.checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new apollo_link_1.ApolloLink(function (operation) {\n        var chosenURI = apollo_link_http_common_1.selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = tslib_1.__assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = apollo_link_http_common_1.selectHttpOptionsAndBody(operation, apollo_link_http_common_1.fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = apollo_link_http_common_1.createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return apollo_link_1.fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = apollo_link_http_common_1.serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return apollo_link_1.fromError(parseError);\n            }\n        }\n        return new apollo_link_1.Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(apollo_link_http_common_1.parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = apollo_link_http_common_1.serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = apollo_link_http_common_1.serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    tslib_1.__extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, exports.createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(apollo_link_1.ApolloLink));\nexports.HttpLink = HttpLink;\n//# sourceMappingURL=httpLink.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./httpLink\"), exports);\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}