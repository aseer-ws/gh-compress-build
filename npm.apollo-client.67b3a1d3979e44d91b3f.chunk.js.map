{"version":3,"sources":["webpack://react-template/./node_modules/apollo-client/bundle.umd.js"],"names":["globalThis","self","_exports","_tslib","_apolloUtilities","_apolloLink","_symbolObservable","_tsInvariant","_visitor","_interopRequireDefault","obj","__esModule","default","NetworkStatus","isNetworkRequestInFlight","networkStatus","isApolloError","ObservableQuery","FetchType","ApolloError","ApolloClient","Observable","_super","apply","this","arguments","__extends","prototype","isNonEmptyArray","value","Array","isArray","length","err","hasOwnProperty","generateErrorMessage","message","graphQLErrors","forEach","graphQLError","errorMessage","networkError","replace","_a","extraInfo","_this","call","__proto__","Error","hasError","storeValue","policy","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","observers","Set","subscriptions","isTornDown","variables","queryId","generateQueryId","opDef","getOperationDefinition","query","queryName","name","result","Promise","resolve","reject","next","delete","size","removeQuery","setTimeout","subscription","unsubscribe","error","subscribe","currentResult","getCurrentResult","undefined","data","lastResult","lastError","loading","getCurrentQueryResult","partial","queryStoreValue","queryStore","get","fetchPolicy","isNetworkFetchPolicy","errorPolicy","__assign","errors","ready","updateLastResult","stale","isDifferentFromLastResult","newResult","snapshot","lastResultSnapshot","isEqual","getLastResult","getLastError","resetLastResults","resetQueryStoreErrors","refetch","InvariantError","fetchQuery","fetchMore","fetchMoreOptions","invariant","updateQuery","combinedOptions","qid","normal","then","fetchMoreResult","previousResult","stopQuery","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","onError","add","setOptions","opts","oldFetchPolicy","pollInterval","startPolling","stopPolling","setVariables","fetchResults","tryFetch","mapFn","getQueryWithPreviousResult","tryFunctionOrLogError","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","assumeImmutableResults","cloneDeep","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","first","setUpQuery","tearDownQuery","addObservableQuery","iterateObserversSafely","observeQuery","previousResult_1","query_1","fetchPolicy_1","transform","hasClientExports","getLocalState","addExportedVariables","previousVariables","serverQuery","catch","sub","clear","removeObservableQuery","method","argument","observersWithMethod","obs","push","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","QueryStore","initQuery","previousQuery","isSetVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","complete","observableQueryIds","Object","keys","indexOf","capitalizeFirstLetter","str","charAt","toUpperCase","slice","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","mergeDeep","setResolvers","getResolvers","runResolvers","remoteResult","context","onlyRunForcedResolvers","__awaiter","__generator","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","hasDirectives","removeClientSetsFromDocument","prepareContext","getCacheKey","config","dataIdFromObject","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","visit","Directive","enter","node","some","arg","kind","BREAK","diff","buildQueryFromSelectionSet","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","getMainDefinition","getFragmentDefinitions","createFragmentMap","operation","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","shouldInclude","isField","resolveField","fieldResult","resultKeyNameFromField","isInlineFragment","fragmentResult","all","selections","map","mergeDeepArray","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","argumentsObjectFromField","directives","directive","resolveSubSelectedArray","item","multiplex","inner","asyncMap","observable","activeNextCount","completed","handler","e","QueryManager","link","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","transformCache","canUseWeakMap","WeakMap","inFlightLinkObservables","pollingInfoByQueryId","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","_f","label","setQuery","getVariables","sent","ret","observableQuery","updater","markMutationInit","storeResult","getObservableFromLink","graphQLResultHasError","markMutationComplete","refetchQueryPromises","refetchQuery","queryOptions","fetchType","isNetworkOnly","needToFetch","shouldFetch","requestId","cancel","networkResult","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","hasForcedResolvers","newData","queryListenerForObserver","invoke","networkStatusChanged","shouldNotifyIfLoading","notifyOnNetworkStatusChange","hasGraphQLErrors","isMissing","errorStatusChanged","diffResult","resultFromStore","has","transformed","transformDocument","forLink","removeConnectionDirectiveFromDocument","transformForLink","cacheEntry_1","defaultVars","getDefaultValues","doc","set","watchQuery","transformedOptions","watchedQuery","String","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","watch","callback","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","startQuery","makeObservable","markSubscriptionResult","observablePromise_1","x","queryIdOrObservable","foundObserveableQuery","info","id","deduplication","inFlightLinkObservables_1","operationName","getOperationName","forceFetch","byVariables_1","varJson_1","JSON","stringify","cleanup","cleanupSub_1","of","errorsFromStore","fqrfId","result_1","prev","newInfo","newContext","checkInFlight","interval","maybeFetch_1","poll_1","clearTimeout","timeout","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","updateQueries_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","removeOptimistic","version","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","ApolloLink","empty","disableNetworkFetches","bind","window","__APOLLO_CLIENT__","devToolsHookCb","action","state","mutations","dataWithOptimisticResults","extract","readQuery","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","__requestRaw","payload","initQueryManager","fn","onResetStore","filter","onClearStore","restore","serializedState","setLocalStateFragmentMatcher","_default"],"mappings":"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","file":"npm.apollo-client.67b3a1d3979e44d91b3f.chunk.js","sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\", \"tslib\", \"apollo-utilities\", \"apollo-link\", \"symbol-observable\", \"ts-invariant\", \"graphql/language/visitor\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require(\"tslib\"), require(\"apollo-utilities\"), require(\"apollo-link\"), require(\"symbol-observable\"), require(\"ts-invariant\"), require(\"graphql/language/visitor\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.tslib, global.apolloUtilities, global.apolloLink, global.symbolObservable, global.tsInvariant, global.visitor);\n    global.unknown = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_exports, _tslib, _apolloUtilities, _apolloLink, _symbolObservable, _tsInvariant, _visitor) {\n\n  _exports.__esModule = true;\n  _exports.isApolloError = isApolloError;\n  _exports.ObservableQuery = _exports.NetworkStatus = _exports.FetchType = _exports.ApolloError = _exports.ApolloClient = _exports.default = void 0;\n  _symbolObservable = _interopRequireDefault(_symbolObservable);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  var NetworkStatus;\n  _exports.NetworkStatus = NetworkStatus;\n\n  (function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n  })(NetworkStatus || (_exports.NetworkStatus = NetworkStatus = {}));\n\n  function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n  }\n\n  var Observable = function (_super) {\n    (0, _tslib.__extends)(Observable, _super);\n\n    function Observable() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    Observable.prototype[_symbolObservable.default] = function () {\n      return this;\n    };\n\n    Observable.prototype['@@observable'] = function () {\n      return this;\n    };\n\n    return Observable;\n  }(_apolloLink.Observable);\n\n  function isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n  }\n\n  function isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n  }\n\n  var generateErrorMessage = function (err) {\n    var message = '';\n\n    if (isNonEmptyArray(err.graphQLErrors)) {\n      err.graphQLErrors.forEach(function (graphQLError) {\n        var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n        message += \"GraphQL error: \" + errorMessage + \"\\n\";\n      });\n    }\n\n    if (err.networkError) {\n      message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n\n    message = message.replace(/\\n$/, '');\n    return message;\n  };\n\n  var ApolloError = function (_super) {\n    (0, _tslib.__extends)(ApolloError, _super);\n\n    function ApolloError(_a) {\n      var graphQLErrors = _a.graphQLErrors,\n          networkError = _a.networkError,\n          errorMessage = _a.errorMessage,\n          extraInfo = _a.extraInfo;\n\n      var _this = _super.call(this, errorMessage) || this;\n\n      _this.graphQLErrors = graphQLErrors || [];\n      _this.networkError = networkError || null;\n\n      if (!errorMessage) {\n        _this.message = generateErrorMessage(_this);\n      } else {\n        _this.message = errorMessage;\n      }\n\n      _this.extraInfo = extraInfo;\n      _this.__proto__ = ApolloError.prototype;\n      return _this;\n    }\n\n    return ApolloError;\n  }(Error);\n\n  _exports.ApolloError = ApolloError;\n  var FetchType;\n  _exports.FetchType = FetchType;\n\n  (function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n  })(FetchType || (_exports.FetchType = FetchType = {}));\n\n  var hasError = function (storeValue, policy) {\n    if (policy === void 0) {\n      policy = 'none';\n    }\n\n    return storeValue && (storeValue.networkError || policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors));\n  };\n\n  var ObservableQuery = function (_super) {\n    (0, _tslib.__extends)(ObservableQuery, _super);\n\n    function ObservableQuery(_a) {\n      var queryManager = _a.queryManager,\n          options = _a.options,\n          _b = _a.shouldSubscribe,\n          shouldSubscribe = _b === void 0 ? true : _b;\n\n      var _this = _super.call(this, function (observer) {\n        return _this.onSubscribe(observer);\n      }) || this;\n\n      _this.observers = new Set();\n      _this.subscriptions = new Set();\n      _this.isTornDown = false;\n      _this.options = options;\n      _this.variables = options.variables || {};\n      _this.queryId = queryManager.generateQueryId();\n      _this.shouldSubscribe = shouldSubscribe;\n      var opDef = (0, _apolloUtilities.getOperationDefinition)(options.query);\n      _this.queryName = opDef && opDef.name && opDef.name.value;\n      _this.queryManager = queryManager;\n      return _this;\n    }\n\n    ObservableQuery.prototype.result = function () {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var observer = {\n          next: function (result) {\n            resolve(result);\n\n            _this.observers.delete(observer);\n\n            if (!_this.observers.size) {\n              _this.queryManager.removeQuery(_this.queryId);\n            }\n\n            setTimeout(function () {\n              subscription.unsubscribe();\n            }, 0);\n          },\n          error: reject\n        };\n\n        var subscription = _this.subscribe(observer);\n      });\n    };\n\n    ObservableQuery.prototype.currentResult = function () {\n      var result = this.getCurrentResult();\n\n      if (result.data === undefined) {\n        result.data = {};\n      }\n\n      return result;\n    };\n\n    ObservableQuery.prototype.getCurrentResult = function () {\n      if (this.isTornDown) {\n        var lastResult = this.lastResult;\n        return {\n          data: !this.lastError && lastResult && lastResult.data || void 0,\n          error: this.lastError,\n          loading: false,\n          networkStatus: NetworkStatus.error\n        };\n      }\n\n      var _a = this.queryManager.getCurrentQueryResult(this),\n          data = _a.data,\n          partial = _a.partial;\n\n      var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n      var result;\n      var fetchPolicy = this.options.fetchPolicy;\n      var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n      if (queryStoreValue) {\n        var networkStatus = queryStoreValue.networkStatus;\n\n        if (hasError(queryStoreValue, this.options.errorPolicy)) {\n          return {\n            data: void 0,\n            loading: false,\n            networkStatus: networkStatus,\n            error: new ApolloError({\n              graphQLErrors: queryStoreValue.graphQLErrors,\n              networkError: queryStoreValue.networkError\n            })\n          };\n        }\n\n        if (queryStoreValue.variables) {\n          this.options.variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options.variables), queryStoreValue.variables);\n          this.variables = this.options.variables;\n        }\n\n        result = {\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        };\n\n        if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n          result.errors = queryStoreValue.graphQLErrors;\n        }\n      } else {\n        var loading = isNetworkFetchPolicy || partial && fetchPolicy !== 'cache-only';\n        result = {\n          data: data,\n          loading: loading,\n          networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready\n        };\n      }\n\n      if (!partial) {\n        this.updateLastResult((0, _tslib.__assign)((0, _tslib.__assign)({}, result), {\n          stale: false\n        }));\n      }\n\n      return (0, _tslib.__assign)((0, _tslib.__assign)({}, result), {\n        partial: partial\n      });\n    };\n\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n      var snapshot = this.lastResultSnapshot;\n      return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && (0, _apolloUtilities.isEqual)(snapshot.data, newResult.data));\n    };\n\n    ObservableQuery.prototype.getLastResult = function () {\n      return this.lastResult;\n    };\n\n    ObservableQuery.prototype.getLastError = function () {\n      return this.lastError;\n    };\n\n    ObservableQuery.prototype.resetLastResults = function () {\n      delete this.lastResult;\n      delete this.lastResultSnapshot;\n      delete this.lastError;\n      this.isTornDown = false;\n    };\n\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n      var queryStore = this.queryManager.queryStore.get(this.queryId);\n\n      if (queryStore) {\n        queryStore.networkError = null;\n        queryStore.graphQLErrors = [];\n      }\n    };\n\n    ObservableQuery.prototype.refetch = function (variables) {\n      var fetchPolicy = this.options.fetchPolicy;\n\n      if (fetchPolicy === 'cache-only') {\n        return Promise.reject(process.env.NODE_ENV === \"production\" ? new _tsInvariant.InvariantError(1) : new _tsInvariant.InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n      }\n\n      if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n        fetchPolicy = 'network-only';\n      }\n\n      if (!(0, _apolloUtilities.isEqual)(this.variables, variables)) {\n        this.variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.variables), variables);\n      }\n\n      if (!(0, _apolloUtilities.isEqual)(this.options.variables, this.variables)) {\n        this.options.variables = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options.variables), this.variables);\n      }\n\n      return this.queryManager.fetchQuery(this.queryId, (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options), {\n        fetchPolicy: fetchPolicy\n      }), FetchType.refetch);\n    };\n\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n      var _this = this;\n\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(fetchMoreOptions.updateQuery, 2) : (0, _tsInvariant.invariant)(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n      var combinedOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, this.options), fetchMoreOptions), {\n        variables: (0, _tslib.__assign)((0, _tslib.__assign)({}, this.variables), fetchMoreOptions.variables)\n      })), {\n        fetchPolicy: 'network-only'\n      });\n      var qid = this.queryManager.generateQueryId();\n      return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function (fetchMoreResult) {\n        _this.updateQuery(function (previousResult) {\n          return fetchMoreOptions.updateQuery(previousResult, {\n            fetchMoreResult: fetchMoreResult.data,\n            variables: combinedOptions.variables\n          });\n        });\n\n        _this.queryManager.stopQuery(qid);\n\n        return fetchMoreResult;\n      }, function (error) {\n        _this.queryManager.stopQuery(qid);\n\n        throw error;\n      });\n    };\n\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n      var _this = this;\n\n      var subscription = this.queryManager.startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables\n      }).subscribe({\n        next: function (subscriptionData) {\n          var updateQuery = options.updateQuery;\n\n          if (updateQuery) {\n            _this.updateQuery(function (previous, _a) {\n              var variables = _a.variables;\n              return updateQuery(previous, {\n                subscriptionData: subscriptionData,\n                variables: variables\n              });\n            });\n          }\n        },\n        error: function (err) {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n\n          process.env.NODE_ENV === \"production\" || _tsInvariant.invariant.error('Unhandled GraphQL subscription error', err);\n        }\n      });\n      this.subscriptions.add(subscription);\n      return function () {\n        if (_this.subscriptions.delete(subscription)) {\n          subscription.unsubscribe();\n        }\n      };\n    };\n\n    ObservableQuery.prototype.setOptions = function (opts) {\n      var oldFetchPolicy = this.options.fetchPolicy;\n      this.options = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.options), opts);\n\n      if (opts.pollInterval) {\n        this.startPolling(opts.pollInterval);\n      } else if (opts.pollInterval === 0) {\n        this.stopPolling();\n      }\n\n      var fetchPolicy = opts.fetchPolicy;\n      return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' || oldFetchPolicy === 'standby' || fetchPolicy === 'network-only'), opts.fetchResults);\n    };\n\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n      if (tryFetch === void 0) {\n        tryFetch = false;\n      }\n\n      if (fetchResults === void 0) {\n        fetchResults = true;\n      }\n\n      this.isTornDown = false;\n      variables = variables || this.variables;\n\n      if (!tryFetch && (0, _apolloUtilities.isEqual)(variables, this.variables)) {\n        return this.observers.size && fetchResults ? this.result() : Promise.resolve();\n      }\n\n      this.variables = this.options.variables = variables;\n\n      if (!this.observers.size) {\n        return Promise.resolve();\n      }\n\n      return this.queryManager.fetchQuery(this.queryId, this.options);\n    };\n\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n      var queryManager = this.queryManager;\n\n      var _a = queryManager.getQueryWithPreviousResult(this.queryId),\n          previousResult = _a.previousResult,\n          variables = _a.variables,\n          document = _a.document;\n\n      var newResult = (0, _apolloUtilities.tryFunctionOrLogError)(function () {\n        return mapFn(previousResult, {\n          variables: variables\n        });\n      });\n\n      if (newResult) {\n        queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n        queryManager.broadcastQueries();\n      }\n    };\n\n    ObservableQuery.prototype.stopPolling = function () {\n      this.queryManager.stopPollingQuery(this.queryId);\n      this.options.pollInterval = undefined;\n    };\n\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      this.options.pollInterval = pollInterval;\n      this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n      var previousResult = this.lastResult;\n      this.lastResult = newResult;\n      this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : (0, _apolloUtilities.cloneDeep)(newResult);\n      return previousResult;\n    };\n\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n      var _this = this;\n\n      try {\n        var subObserver = observer._subscription._observer;\n\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n\n      var first = !this.observers.size;\n      this.observers.add(observer);\n      if (observer.next && this.lastResult) observer.next(this.lastResult);\n      if (observer.error && this.lastError) observer.error(this.lastError);\n\n      if (first) {\n        this.setUpQuery();\n      }\n\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    };\n\n    ObservableQuery.prototype.setUpQuery = function () {\n      var _this = this;\n\n      var _a = this,\n          queryManager = _a.queryManager,\n          queryId = _a.queryId;\n\n      if (this.shouldSubscribe) {\n        queryManager.addObservableQuery(queryId, this);\n      }\n\n      if (this.options.pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        queryManager.startPollingQuery(this.options, queryId);\n      }\n\n      var onError = function (error) {\n        _this.updateLastResult((0, _tslib.__assign)((0, _tslib.__assign)({}, _this.lastResult), {\n          errors: error.graphQLErrors,\n          networkStatus: NetworkStatus.error,\n          loading: false\n        }));\n\n        iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n      };\n\n      queryManager.observeQuery(queryId, this.options, {\n        next: function (result) {\n          if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n            var previousResult_1 = _this.updateLastResult(result);\n\n            var _a = _this.options,\n                query_1 = _a.query,\n                variables = _a.variables,\n                fetchPolicy_1 = _a.fetchPolicy;\n\n            if (queryManager.transform(query_1).hasClientExports) {\n              queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n                var previousVariables = _this.variables;\n                _this.variables = _this.options.variables = variables;\n\n                if (!result.loading && previousResult_1 && fetchPolicy_1 !== 'cache-only' && queryManager.transform(query_1).serverQuery && !(0, _apolloUtilities.isEqual)(previousVariables, variables)) {\n                  _this.refetch();\n                } else {\n                  iterateObserversSafely(_this.observers, 'next', result);\n                }\n              });\n            } else {\n              iterateObserversSafely(_this.observers, 'next', result);\n            }\n          }\n        },\n        error: onError\n      }).catch(onError);\n    };\n\n    ObservableQuery.prototype.tearDownQuery = function () {\n      var queryManager = this.queryManager;\n      this.isTornDown = true;\n      queryManager.stopPollingQuery(this.queryId);\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      this.subscriptions.clear();\n      queryManager.removeObservableQuery(this.queryId);\n      queryManager.stopQuery(this.queryId);\n      this.observers.clear();\n    };\n\n    return ObservableQuery;\n  }(Observable);\n\n  _exports.ObservableQuery = ObservableQuery;\n\n  function defaultSubscriptionObserverErrorCallback(error) {\n    process.env.NODE_ENV === \"production\" || _tsInvariant.invariant.error('Unhandled error', error.message, error.stack);\n  }\n\n  function iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) {\n      return obs[method] && observersWithMethod.push(obs);\n    });\n    observersWithMethod.forEach(function (obs) {\n      return obs[method](argument);\n    });\n  }\n\n  function assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 3) : (0, _tsInvariant.invariant)(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n  }\n\n  var MutationStore = function () {\n    function MutationStore() {\n      this.store = {};\n    }\n\n    MutationStore.prototype.getStore = function () {\n      return this.store;\n    };\n\n    MutationStore.prototype.get = function (mutationId) {\n      return this.store[mutationId];\n    };\n\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n      this.store[mutationId] = {\n        mutation: mutation,\n        variables: variables || {},\n        loading: true,\n        error: null\n      };\n    };\n\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n      var mutation = this.store[mutationId];\n\n      if (mutation) {\n        mutation.loading = false;\n        mutation.error = error;\n      }\n    };\n\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n      var mutation = this.store[mutationId];\n\n      if (mutation) {\n        mutation.loading = false;\n        mutation.error = null;\n      }\n    };\n\n    MutationStore.prototype.reset = function () {\n      this.store = {};\n    };\n\n    return MutationStore;\n  }();\n\n  var QueryStore = function () {\n    function QueryStore() {\n      this.store = {};\n    }\n\n    QueryStore.prototype.getStore = function () {\n      return this.store;\n    };\n\n    QueryStore.prototype.get = function (queryId) {\n      return this.store[queryId];\n    };\n\n    QueryStore.prototype.initQuery = function (query) {\n      var previousQuery = this.store[query.queryId];\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(!previousQuery || previousQuery.document === query.document || (0, _apolloUtilities.isEqual)(previousQuery.document, query.document), 19) : (0, _tsInvariant.invariant)(!previousQuery || previousQuery.document === query.document || (0, _apolloUtilities.isEqual)(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n      var isSetVariables = false;\n      var previousVariables = null;\n\n      if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {\n        if (!(0, _apolloUtilities.isEqual)(previousQuery.variables, query.variables)) {\n          isSetVariables = true;\n          previousVariables = previousQuery.variables;\n        }\n      }\n\n      var networkStatus;\n\n      if (isSetVariables) {\n        networkStatus = NetworkStatus.setVariables;\n      } else if (query.isPoll) {\n        networkStatus = NetworkStatus.poll;\n      } else if (query.isRefetch) {\n        networkStatus = NetworkStatus.refetch;\n      } else {\n        networkStatus = NetworkStatus.loading;\n      }\n\n      var graphQLErrors = [];\n\n      if (previousQuery && previousQuery.graphQLErrors) {\n        graphQLErrors = previousQuery.graphQLErrors;\n      }\n\n      this.store[query.queryId] = {\n        document: query.document,\n        variables: query.variables,\n        previousVariables: previousVariables,\n        networkError: null,\n        graphQLErrors: graphQLErrors,\n        networkStatus: networkStatus,\n        metadata: query.metadata\n      };\n\n      if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n        this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n      }\n    };\n\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n      if (!this.store || !this.store[queryId]) return;\n      this.store[queryId].networkError = null;\n      this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n      this.store[queryId].previousVariables = null;\n      this.store[queryId].networkStatus = NetworkStatus.ready;\n\n      if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n        this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n      }\n    };\n\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n      if (!this.store || !this.store[queryId]) return;\n      this.store[queryId].networkError = error;\n      this.store[queryId].networkStatus = NetworkStatus.error;\n\n      if (typeof fetchMoreForQueryId === 'string') {\n        this.markQueryResultClient(fetchMoreForQueryId, true);\n      }\n    };\n\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n      var storeValue = this.store && this.store[queryId];\n\n      if (storeValue) {\n        storeValue.networkError = null;\n        storeValue.previousVariables = null;\n\n        if (complete) {\n          storeValue.networkStatus = NetworkStatus.ready;\n        }\n      }\n    };\n\n    QueryStore.prototype.stopQuery = function (queryId) {\n      delete this.store[queryId];\n    };\n\n    QueryStore.prototype.reset = function (observableQueryIds) {\n      var _this = this;\n\n      Object.keys(this.store).forEach(function (queryId) {\n        if (observableQueryIds.indexOf(queryId) < 0) {\n          _this.stopQuery(queryId);\n        } else {\n          _this.store[queryId].networkStatus = NetworkStatus.loading;\n        }\n      });\n    };\n\n    return QueryStore;\n  }();\n\n  function capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  var LocalState = function () {\n    function LocalState(_a) {\n      var cache = _a.cache,\n          client = _a.client,\n          resolvers = _a.resolvers,\n          fragmentMatcher = _a.fragmentMatcher;\n      this.cache = cache;\n\n      if (client) {\n        this.client = client;\n      }\n\n      if (resolvers) {\n        this.addResolvers(resolvers);\n      }\n\n      if (fragmentMatcher) {\n        this.setFragmentMatcher(fragmentMatcher);\n      }\n    }\n\n    LocalState.prototype.addResolvers = function (resolvers) {\n      var _this = this;\n\n      this.resolvers = this.resolvers || {};\n\n      if (Array.isArray(resolvers)) {\n        resolvers.forEach(function (resolverGroup) {\n          _this.resolvers = (0, _apolloUtilities.mergeDeep)(_this.resolvers, resolverGroup);\n        });\n      } else {\n        this.resolvers = (0, _apolloUtilities.mergeDeep)(this.resolvers, resolvers);\n      }\n    };\n\n    LocalState.prototype.setResolvers = function (resolvers) {\n      this.resolvers = {};\n      this.addResolvers(resolvers);\n    };\n\n    LocalState.prototype.getResolvers = function () {\n      return this.resolvers || {};\n    };\n\n    LocalState.prototype.runResolvers = function (_a) {\n      var document = _a.document,\n          remoteResult = _a.remoteResult,\n          context = _a.context,\n          variables = _a.variables,\n          _b = _a.onlyRunForcedResolvers,\n          onlyRunForcedResolvers = _b === void 0 ? false : _b;\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        return (0, _tslib.__generator)(this, function (_c) {\n          if (document) {\n            return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n              return (0, _tslib.__assign)((0, _tslib.__assign)({}, remoteResult), {\n                data: localResult.result\n              });\n            })];\n          }\n\n          return [2, remoteResult];\n        });\n      });\n    };\n\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n      this.fragmentMatcher = fragmentMatcher;\n    };\n\n    LocalState.prototype.getFragmentMatcher = function () {\n      return this.fragmentMatcher;\n    };\n\n    LocalState.prototype.clientQuery = function (document) {\n      if ((0, _apolloUtilities.hasDirectives)(['client'], document)) {\n        if (this.resolvers) {\n          return document;\n        }\n\n        process.env.NODE_ENV === \"production\" || _tsInvariant.invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' + 'were specified. This means ApolloClient local resolver handling ' + 'has been disabled, and @client directives will be passed through ' + 'to your link chain.');\n      }\n\n      return null;\n    };\n\n    LocalState.prototype.serverQuery = function (document) {\n      return this.resolvers ? (0, _apolloUtilities.removeClientSetsFromDocument)(document) : document;\n    };\n\n    LocalState.prototype.prepareContext = function (context) {\n      if (context === void 0) {\n        context = {};\n      }\n\n      var cache = this.cache;\n      var newContext = (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {\n        cache: cache,\n        getCacheKey: function (obj) {\n          if (cache.config) {\n            return cache.config.dataIdFromObject(obj);\n          } else {\n            process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(false, 6) : (0, _tsInvariant.invariant)(false, 'To use context.getCacheKey, you need to use a cache that has ' + 'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n          }\n        }\n      });\n      return newContext;\n    };\n\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (context === void 0) {\n        context = {};\n      }\n\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        return (0, _tslib.__generator)(this, function (_a) {\n          if (document) {\n            return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n              return (0, _tslib.__assign)((0, _tslib.__assign)({}, variables), data.exportedVariables);\n            })];\n          }\n\n          return [2, (0, _tslib.__assign)({}, variables)];\n        });\n      });\n    };\n\n    LocalState.prototype.shouldForceResolvers = function (document) {\n      var forceResolvers = false;\n      (0, _visitor.visit)(document, {\n        Directive: {\n          enter: function (node) {\n            if (node.name.value === 'client' && node.arguments) {\n              forceResolvers = node.arguments.some(function (arg) {\n                return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n              });\n\n              if (forceResolvers) {\n                return _visitor.BREAK;\n              }\n            }\n          }\n        }\n      });\n      return forceResolvers;\n    };\n\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n      return this.cache.diff({\n        query: (0, _apolloUtilities.buildQueryFromSelectionSet)(document),\n        variables: variables,\n        returnPartialData: true,\n        optimistic: false\n      }).result;\n    };\n\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n      if (context === void 0) {\n        context = {};\n      }\n\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (fragmentMatcher === void 0) {\n        fragmentMatcher = function () {\n          return true;\n        };\n      }\n\n      if (onlyRunForcedResolvers === void 0) {\n        onlyRunForcedResolvers = false;\n      }\n\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n\n        return (0, _tslib.__generator)(this, function (_b) {\n          mainDefinition = (0, _apolloUtilities.getMainDefinition)(document);\n          fragments = (0, _apolloUtilities.getFragmentDefinitions)(document);\n          fragmentMap = (0, _apolloUtilities.createFragmentMap)(fragments);\n          definitionOperation = mainDefinition.operation;\n          defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : 'Query';\n          _a = this, cache = _a.cache, client = _a.client;\n          execContext = {\n            fragmentMap: fragmentMap,\n            context: (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {\n              cache: cache,\n              client: client\n            }),\n            variables: variables,\n            fragmentMatcher: fragmentMatcher,\n            defaultOperationType: defaultOperationType,\n            exportedVariables: {},\n            onlyRunForcedResolvers: onlyRunForcedResolvers\n          };\n          return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n            return {\n              result: result,\n              exportedVariables: execContext.exportedVariables\n            };\n          })];\n        });\n      });\n    };\n\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        var fragmentMap, context, variables, resultsToMerge, execute;\n\n        var _this = this;\n\n        return (0, _tslib.__generator)(this, function (_a) {\n          fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n          resultsToMerge = [rootValue];\n\n          execute = function (selection) {\n            return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {\n              var fragment, typeCondition;\n              return (0, _tslib.__generator)(this, function (_a) {\n                if (!(0, _apolloUtilities.shouldInclude)(selection, variables)) {\n                  return [2];\n                }\n\n                if ((0, _apolloUtilities.isField)(selection)) {\n                  return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                    var _a;\n\n                    if (typeof fieldResult !== 'undefined') {\n                      resultsToMerge.push((_a = {}, _a[(0, _apolloUtilities.resultKeyNameFromField)(selection)] = fieldResult, _a));\n                    }\n                  })];\n                }\n\n                if ((0, _apolloUtilities.isInlineFragment)(selection)) {\n                  fragment = selection;\n                } else {\n                  fragment = fragmentMap[selection.name.value];\n                  process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(fragment, 7) : (0, _tsInvariant.invariant)(fragment, \"No fragment named \" + selection.name.value);\n                }\n\n                if (fragment && fragment.typeCondition) {\n                  typeCondition = fragment.typeCondition.name.value;\n\n                  if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                    return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                      resultsToMerge.push(fragmentResult);\n                    })];\n                  }\n                }\n\n                return [2];\n              });\n            });\n          };\n\n          return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n            return (0, _apolloUtilities.mergeDeepArray)(resultsToMerge);\n          })];\n        });\n      });\n    };\n\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n        var _this = this;\n\n        return (0, _tslib.__generator)(this, function (_a) {\n          variables = execContext.variables;\n          fieldName = field.name.value;\n          aliasedFieldName = (0, _apolloUtilities.resultKeyNameFromField)(field);\n          aliasUsed = fieldName !== aliasedFieldName;\n          defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n          resultPromise = Promise.resolve(defaultResult);\n\n          if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n            resolverType = rootValue.__typename || execContext.defaultOperationType;\n            resolverMap = this.resolvers && this.resolvers[resolverType];\n\n            if (resolverMap) {\n              resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n              if (resolve) {\n                resultPromise = Promise.resolve(resolve(rootValue, (0, _apolloUtilities.argumentsObjectFromField)(field, variables), execContext.context, {\n                  field: field,\n                  fragmentMap: execContext.fragmentMap\n                }));\n              }\n            }\n          }\n\n          return [2, resultPromise.then(function (result) {\n            if (result === void 0) {\n              result = defaultResult;\n            }\n\n            if (field.directives) {\n              field.directives.forEach(function (directive) {\n                if (directive.name.value === 'export' && directive.arguments) {\n                  directive.arguments.forEach(function (arg) {\n                    if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                      execContext.exportedVariables[arg.value.value] = result;\n                    }\n                  });\n                }\n              });\n            }\n\n            if (!field.selectionSet) {\n              return result;\n            }\n\n            if (result == null) {\n              return result;\n            }\n\n            if (Array.isArray(result)) {\n              return _this.resolveSubSelectedArray(field, result, execContext);\n            }\n\n            if (field.selectionSet) {\n              return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n            }\n          })];\n        });\n      });\n    };\n\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n      var _this = this;\n\n      return Promise.all(result.map(function (item) {\n        if (item === null) {\n          return null;\n        }\n\n        if (Array.isArray(item)) {\n          return _this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        if (field.selectionSet) {\n          return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }));\n    };\n\n    return LocalState;\n  }();\n\n  function multiplex(inner) {\n    var observers = new Set();\n    var sub = null;\n    return new Observable(function (observer) {\n      observers.add(observer);\n      sub = sub || inner.subscribe({\n        next: function (value) {\n          observers.forEach(function (obs) {\n            return obs.next && obs.next(value);\n          });\n        },\n        error: function (error) {\n          observers.forEach(function (obs) {\n            return obs.error && obs.error(error);\n          });\n        },\n        complete: function () {\n          observers.forEach(function (obs) {\n            return obs.complete && obs.complete();\n          });\n        }\n      });\n      return function () {\n        if (observers.delete(observer) && !observers.size && sub) {\n          sub.unsubscribe();\n          sub = null;\n        }\n      };\n    });\n  }\n\n  function asyncMap(observable, mapFn) {\n    return new Observable(function (observer) {\n      var next = observer.next,\n          error = observer.error,\n          complete = observer.complete;\n      var activeNextCount = 0;\n      var completed = false;\n      var handler = {\n        next: function (value) {\n          ++activeNextCount;\n          new Promise(function (resolve) {\n            resolve(mapFn(value));\n          }).then(function (result) {\n            --activeNextCount;\n            next && next.call(observer, result);\n            completed && handler.complete();\n          }, function (e) {\n            --activeNextCount;\n            error && error.call(observer, e);\n          });\n        },\n        error: function (e) {\n          error && error.call(observer, e);\n        },\n        complete: function () {\n          completed = true;\n\n          if (!activeNextCount) {\n            complete && complete.call(observer);\n          }\n        }\n      };\n      var sub = observable.subscribe(handler);\n      return function () {\n        return sub.unsubscribe();\n      };\n    });\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var QueryManager = function () {\n    function QueryManager(_a) {\n      var link = _a.link,\n          _b = _a.queryDeduplication,\n          queryDeduplication = _b === void 0 ? false : _b,\n          store = _a.store,\n          _c = _a.onBroadcast,\n          onBroadcast = _c === void 0 ? function () {\n        return undefined;\n      } : _c,\n          _d = _a.ssrMode,\n          ssrMode = _d === void 0 ? false : _d,\n          _e = _a.clientAwareness,\n          clientAwareness = _e === void 0 ? {} : _e,\n          localState = _a.localState,\n          assumeImmutableResults = _a.assumeImmutableResults;\n      this.mutationStore = new MutationStore();\n      this.queryStore = new QueryStore();\n      this.clientAwareness = {};\n      this.idCounter = 1;\n      this.queries = new Map();\n      this.fetchQueryRejectFns = new Map();\n      this.transformCache = new (_apolloUtilities.canUseWeakMap ? WeakMap : Map)();\n      this.inFlightLinkObservables = new Map();\n      this.pollingInfoByQueryId = new Map();\n      this.link = link;\n      this.queryDeduplication = queryDeduplication;\n      this.dataStore = store;\n      this.onBroadcast = onBroadcast;\n      this.clientAwareness = clientAwareness;\n      this.localState = localState || new LocalState({\n        cache: store.getCache()\n      });\n      this.ssrMode = ssrMode;\n      this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n\n    QueryManager.prototype.stop = function () {\n      var _this = this;\n\n      this.queries.forEach(function (_info, queryId) {\n        _this.stopQueryNoBroadcast(queryId);\n      });\n      this.fetchQueryRejectFns.forEach(function (reject) {\n        reject(process.env.NODE_ENV === \"production\" ? new _tsInvariant.InvariantError(8) : new _tsInvariant.InvariantError('QueryManager stopped while query was in flight'));\n      });\n    };\n\n    QueryManager.prototype.mutate = function (_a) {\n      var mutation = _a.mutation,\n          variables = _a.variables,\n          optimisticResponse = _a.optimisticResponse,\n          updateQueriesByName = _a.updateQueries,\n          _b = _a.refetchQueries,\n          refetchQueries = _b === void 0 ? [] : _b,\n          _c = _a.awaitRefetchQueries,\n          awaitRefetchQueries = _c === void 0 ? false : _c,\n          updateWithProxyFn = _a.update,\n          _d = _a.errorPolicy,\n          errorPolicy = _d === void 0 ? 'none' : _d,\n          fetchPolicy = _a.fetchPolicy,\n          _e = _a.context,\n          context = _e === void 0 ? {} : _e;\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        var mutationId, generateUpdateQueriesInfo, self;\n\n        var _this = this;\n\n        return (0, _tslib.__generator)(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(mutation, 9) : (0, _tsInvariant.invariant)(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n              process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(!fetchPolicy || fetchPolicy === 'no-cache', 10) : (0, _tsInvariant.invariant)(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n              mutationId = this.generateQueryId();\n              mutation = this.transform(mutation).document;\n              this.setQuery(mutationId, function () {\n                return {\n                  document: mutation\n                };\n              });\n              variables = this.getVariables(mutation, variables);\n              if (!this.transform(mutation).hasClientExports) return [3, 2];\n              return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n            case 1:\n              variables = _f.sent();\n              _f.label = 2;\n\n            case 2:\n              generateUpdateQueriesInfo = function () {\n                var ret = {};\n\n                if (updateQueriesByName) {\n                  _this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n\n                    if (observableQuery) {\n                      var queryName = observableQuery.queryName;\n\n                      if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                        ret[queryId] = {\n                          updater: updateQueriesByName[queryName],\n                          query: _this.queryStore.get(queryId)\n                        };\n                      }\n                    }\n                  });\n                }\n\n                return ret;\n              };\n\n              this.mutationStore.initMutation(mutationId, mutation, variables);\n              this.dataStore.markMutationInit({\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                updateQueries: generateUpdateQueriesInfo(),\n                update: updateWithProxyFn,\n                optimisticResponse: optimisticResponse\n              });\n              this.broadcastQueries();\n              self = this;\n              return [2, new Promise(function (resolve, reject) {\n                var storeResult;\n                var error;\n                self.getObservableFromLink(mutation, (0, _tslib.__assign)((0, _tslib.__assign)({}, context), {\n                  optimisticResponse: optimisticResponse\n                }), variables, false).subscribe({\n                  next: function (result) {\n                    if ((0, _apolloUtilities.graphQLResultHasError)(result) && errorPolicy === 'none') {\n                      error = new ApolloError({\n                        graphQLErrors: result.errors\n                      });\n                      return;\n                    }\n\n                    self.mutationStore.markMutationResult(mutationId);\n\n                    if (fetchPolicy !== 'no-cache') {\n                      self.dataStore.markMutationResult({\n                        mutationId: mutationId,\n                        result: result,\n                        document: mutation,\n                        variables: variables,\n                        updateQueries: generateUpdateQueriesInfo(),\n                        update: updateWithProxyFn\n                      });\n                    }\n\n                    storeResult = result;\n                  },\n                  error: function (err) {\n                    self.mutationStore.markMutationError(mutationId, err);\n                    self.dataStore.markMutationComplete({\n                      mutationId: mutationId,\n                      optimisticResponse: optimisticResponse\n                    });\n                    self.broadcastQueries();\n                    self.setQuery(mutationId, function () {\n                      return {\n                        document: null\n                      };\n                    });\n                    reject(new ApolloError({\n                      networkError: err\n                    }));\n                  },\n                  complete: function () {\n                    if (error) {\n                      self.mutationStore.markMutationError(mutationId, error);\n                    }\n\n                    self.dataStore.markMutationComplete({\n                      mutationId: mutationId,\n                      optimisticResponse: optimisticResponse\n                    });\n                    self.broadcastQueries();\n\n                    if (error) {\n                      reject(error);\n                      return;\n                    }\n\n                    if (typeof refetchQueries === 'function') {\n                      refetchQueries = refetchQueries(storeResult);\n                    }\n\n                    var refetchQueryPromises = [];\n\n                    if (isNonEmptyArray(refetchQueries)) {\n                      refetchQueries.forEach(function (refetchQuery) {\n                        if (typeof refetchQuery === 'string') {\n                          self.queries.forEach(function (_a) {\n                            var observableQuery = _a.observableQuery;\n\n                            if (observableQuery && observableQuery.queryName === refetchQuery) {\n                              refetchQueryPromises.push(observableQuery.refetch());\n                            }\n                          });\n                        } else {\n                          var queryOptions = {\n                            query: refetchQuery.query,\n                            variables: refetchQuery.variables,\n                            fetchPolicy: 'network-only'\n                          };\n\n                          if (refetchQuery.context) {\n                            queryOptions.context = refetchQuery.context;\n                          }\n\n                          refetchQueryPromises.push(self.query(queryOptions));\n                        }\n                      });\n                    }\n\n                    Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                      self.setQuery(mutationId, function () {\n                        return {\n                          document: null\n                        };\n                      });\n\n                      if (errorPolicy === 'ignore' && storeResult && (0, _apolloUtilities.graphQLResultHasError)(storeResult)) {\n                        delete storeResult.errors;\n                      }\n\n                      resolve(storeResult);\n                    });\n                  }\n                });\n              })];\n          }\n        });\n      });\n    };\n\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n        var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n\n        var _this = this;\n\n        return (0, _tslib.__generator)(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n              query = this.transform(options.query).document;\n              variables = this.getVariables(query, options.variables);\n              if (!this.transform(query).hasClientExports) return [3, 2];\n              return [4, this.localState.addExportedVariables(query, variables, context)];\n\n            case 1:\n              variables = _e.sent();\n              _e.label = 2;\n\n            case 2:\n              options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n                variables: variables\n              });\n              isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n              needToFetch = isNetworkOnly;\n\n              if (!isNetworkOnly) {\n                _d = this.dataStore.getCache().diff({\n                  query: query,\n                  variables: variables,\n                  returnPartialData: true,\n                  optimistic: false\n                }), complete = _d.complete, result = _d.result;\n                needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                storeResult = result;\n              }\n\n              shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n              if ((0, _apolloUtilities.hasDirectives)(['live'], query)) shouldFetch = true;\n              requestId = this.idCounter++;\n              cancel = fetchPolicy !== 'no-cache' ? this.updateQueryWatch(queryId, query, options) : undefined;\n              this.setQuery(queryId, function () {\n                return {\n                  document: query,\n                  lastRequestId: requestId,\n                  invalidated: true,\n                  cancel: cancel\n                };\n              });\n              this.invalidate(fetchMoreForQueryId);\n              this.queryStore.initQuery({\n                queryId: queryId,\n                document: query,\n                storePreviousVariables: shouldFetch,\n                variables: variables,\n                isPoll: fetchType === FetchType.poll,\n                isRefetch: fetchType === FetchType.refetch,\n                metadata: metadata,\n                fetchMoreForQueryId: fetchMoreForQueryId\n              });\n              this.broadcastQueries();\n\n              if (shouldFetch) {\n                networkResult = this.fetchRequest({\n                  requestId: requestId,\n                  queryId: queryId,\n                  document: query,\n                  options: options,\n                  fetchMoreForQueryId: fetchMoreForQueryId\n                }).catch(function (error) {\n                  if (isApolloError(error)) {\n                    throw error;\n                  } else {\n                    if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                      _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n\n                      _this.invalidate(queryId);\n\n                      _this.invalidate(fetchMoreForQueryId);\n\n                      _this.broadcastQueries();\n                    }\n\n                    throw new ApolloError({\n                      networkError: error\n                    });\n                  }\n                });\n\n                if (fetchPolicy !== 'cache-and-network') {\n                  return [2, networkResult];\n                }\n\n                networkResult.catch(function () {});\n              }\n\n              this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n              this.invalidate(queryId);\n              this.invalidate(fetchMoreForQueryId);\n\n              if (this.transform(query).hasForcedResolvers) {\n                return [2, this.localState.runResolvers({\n                  document: query,\n                  remoteResult: {\n                    data: storeResult\n                  },\n                  context: context,\n                  variables: variables,\n                  onlyRunForcedResolvers: true\n                }).then(function (result) {\n                  _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n\n                  _this.broadcastQueries();\n\n                  return result;\n                })];\n              }\n\n              this.broadcastQueries();\n              return [2, {\n                data: storeResult\n              }];\n          }\n        });\n      });\n    };\n\n    QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n      var fetchPolicy = _a.fetchPolicy,\n          variables = _a.variables,\n          errorPolicy = _a.errorPolicy;\n\n      if (fetchPolicy === 'no-cache') {\n        this.setQuery(queryId, function () {\n          return {\n            newData: {\n              result: result.data,\n              complete: true\n            }\n          };\n        });\n      } else {\n        this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n      }\n    };\n\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n      var _this = this;\n\n      function invoke(method, argument) {\n        if (observer[method]) {\n          try {\n            observer[method](argument);\n          } catch (e) {\n            process.env.NODE_ENV === \"production\" || _tsInvariant.invariant.error(e);\n          }\n        } else if (method === 'error') {\n          process.env.NODE_ENV === \"production\" || _tsInvariant.invariant.error(argument);\n        }\n      }\n\n      return function (queryStoreValue, newData) {\n        _this.invalidate(queryId, false);\n\n        if (!queryStoreValue) return;\n\n        var _a = _this.getQuery(queryId),\n            observableQuery = _a.observableQuery,\n            document = _a.document;\n\n        var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;\n        if (fetchPolicy === 'standby') return;\n        var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n        var lastResult = observableQuery && observableQuery.getLastResult();\n        var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== queryStoreValue.networkStatus);\n        var shouldNotifyIfLoading = options.returnPartialData || !newData && queryStoreValue.previousVariables || networkStatusChanged && options.notifyOnNetworkStatusChange || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n\n        if (loading && !shouldNotifyIfLoading) {\n          return;\n        }\n\n        var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n        var errorPolicy = observableQuery && observableQuery.options.errorPolicy || options.errorPolicy || 'none';\n\n        if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n          return invoke('error', new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          }));\n        }\n\n        try {\n          var data = void 0;\n          var isMissing = void 0;\n\n          if (newData) {\n            if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n              _this.setQuery(queryId, function () {\n                return {\n                  newData: null\n                };\n              });\n            }\n\n            data = newData.result;\n            isMissing = !newData.complete;\n          } else {\n            var lastError = observableQuery && observableQuery.getLastError();\n            var errorStatusChanged = errorPolicy !== 'none' && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors;\n\n            if (lastResult && lastResult.data && !errorStatusChanged) {\n              data = lastResult.data;\n              isMissing = false;\n            } else {\n              var diffResult = _this.dataStore.getCache().diff({\n                query: document,\n                variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n                returnPartialData: true,\n                optimistic: true\n              });\n\n              data = diffResult.result;\n              isMissing = !diffResult.complete;\n            }\n          }\n\n          var stale = isMissing && !(options.returnPartialData || fetchPolicy === 'cache-only');\n          var resultFromStore = {\n            data: stale ? lastResult && lastResult.data : data,\n            loading: loading,\n            networkStatus: queryStoreValue.networkStatus,\n            stale: stale\n          };\n\n          if (errorPolicy === 'all' && hasGraphQLErrors) {\n            resultFromStore.errors = queryStoreValue.graphQLErrors;\n          }\n\n          invoke('next', resultFromStore);\n        } catch (networkError) {\n          invoke('error', new ApolloError({\n            networkError: networkError\n          }));\n        }\n      };\n    };\n\n    QueryManager.prototype.transform = function (document) {\n      var transformCache = this.transformCache;\n\n      if (!transformCache.has(document)) {\n        var cache = this.dataStore.getCache();\n        var transformed = cache.transformDocument(document);\n        var forLink = (0, _apolloUtilities.removeConnectionDirectiveFromDocument)(cache.transformForLink(transformed));\n        var clientQuery = this.localState.clientQuery(transformed);\n        var serverQuery = this.localState.serverQuery(forLink);\n        var cacheEntry_1 = {\n          document: transformed,\n          hasClientExports: (0, _apolloUtilities.hasClientExports)(transformed),\n          hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n          clientQuery: clientQuery,\n          serverQuery: serverQuery,\n          defaultVars: (0, _apolloUtilities.getDefaultValues)((0, _apolloUtilities.getOperationDefinition)(transformed))\n        };\n\n        var add = function (doc) {\n          if (doc && !transformCache.has(doc)) {\n            transformCache.set(doc, cacheEntry_1);\n          }\n        };\n\n        add(document);\n        add(transformed);\n        add(clientQuery);\n        add(serverQuery);\n      }\n\n      return transformCache.get(document);\n    };\n\n    QueryManager.prototype.getVariables = function (document, variables) {\n      return (0, _tslib.__assign)((0, _tslib.__assign)({}, this.transform(document).defaultVars), variables);\n    };\n\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n      if (shouldSubscribe === void 0) {\n        shouldSubscribe = true;\n      }\n\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(options.fetchPolicy !== 'standby', 11) : (0, _tsInvariant.invariant)(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n      options.variables = this.getVariables(options.query, options.variables);\n\n      if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n        options.notifyOnNetworkStatusChange = false;\n      }\n\n      var transformedOptions = (0, _tslib.__assign)({}, options);\n      return new ObservableQuery({\n        queryManager: this,\n        options: transformedOptions,\n        shouldSubscribe: shouldSubscribe\n      });\n    };\n\n    QueryManager.prototype.query = function (options) {\n      var _this = this;\n\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(options.query, 12) : (0, _tsInvariant.invariant)(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(options.query.kind === 'Document', 13) : (0, _tsInvariant.invariant)(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(!options.returnPartialData, 14) : (0, _tsInvariant.invariant)(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(!options.pollInterval, 15) : (0, _tsInvariant.invariant)(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n      return new Promise(function (resolve, reject) {\n        var watchedQuery = _this.watchQuery(options, false);\n\n        _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n\n        watchedQuery.result().then(resolve, reject).then(function () {\n          return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n        });\n      });\n    };\n\n    QueryManager.prototype.generateQueryId = function () {\n      return String(this.idCounter++);\n    };\n\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n      this.stopQueryInStoreNoBroadcast(queryId);\n      this.broadcastQueries();\n    };\n\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n      this.stopPollingQuery(queryId);\n      this.queryStore.stopQuery(queryId);\n      this.invalidate(queryId);\n    };\n\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n      this.setQuery(queryId, function (_a) {\n        var listeners = _a.listeners;\n        listeners.add(listener);\n        return {\n          invalidated: false\n        };\n      });\n    };\n\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n      var _this = this;\n\n      var cancel = this.getQuery(queryId).cancel;\n      if (cancel) cancel();\n\n      var previousResult = function () {\n        var previousResult = null;\n\n        var observableQuery = _this.getQuery(queryId).observableQuery;\n\n        if (observableQuery) {\n          var lastResult = observableQuery.getLastResult();\n\n          if (lastResult) {\n            previousResult = lastResult.data;\n          }\n        }\n\n        return previousResult;\n      };\n\n      return this.dataStore.getCache().watch({\n        query: document,\n        variables: options.variables,\n        optimistic: true,\n        previousResult: previousResult,\n        callback: function (newData) {\n          _this.setQuery(queryId, function () {\n            return {\n              invalidated: true,\n              newData: newData\n            };\n          });\n        }\n      });\n    };\n\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n      this.setQuery(queryId, function () {\n        return {\n          observableQuery: observableQuery\n        };\n      });\n    };\n\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n      var cancel = this.getQuery(queryId).cancel;\n      this.setQuery(queryId, function () {\n        return {\n          observableQuery: null\n        };\n      });\n      if (cancel) cancel();\n    };\n\n    QueryManager.prototype.clearStore = function () {\n      this.fetchQueryRejectFns.forEach(function (reject) {\n        reject(process.env.NODE_ENV === \"production\" ? new _tsInvariant.InvariantError(16) : new _tsInvariant.InvariantError('Store reset while query was in flight (not completed in link chain)'));\n      });\n      var resetIds = [];\n      this.queries.forEach(function (_a, queryId) {\n        var observableQuery = _a.observableQuery;\n        if (observableQuery) resetIds.push(queryId);\n      });\n      this.queryStore.reset(resetIds);\n      this.mutationStore.reset();\n      return this.dataStore.reset();\n    };\n\n    QueryManager.prototype.resetStore = function () {\n      var _this = this;\n\n      return this.clearStore().then(function () {\n        return _this.reFetchObservableQueries();\n      });\n    };\n\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n      var _this = this;\n\n      if (includeStandby === void 0) {\n        includeStandby = false;\n      }\n\n      var observableQueryPromises = [];\n      this.queries.forEach(function (_a, queryId) {\n        var observableQuery = _a.observableQuery;\n\n        if (observableQuery) {\n          var fetchPolicy = observableQuery.options.fetchPolicy;\n          observableQuery.resetLastResults();\n\n          if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n            observableQueryPromises.push(observableQuery.refetch());\n          }\n\n          _this.setQuery(queryId, function () {\n            return {\n              newData: null\n            };\n          });\n\n          _this.invalidate(queryId);\n        }\n      });\n      this.broadcastQueries();\n      return Promise.all(observableQueryPromises);\n    };\n\n    QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n      this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n      return this.fetchQuery(queryId, options);\n    };\n\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n      process.env.NODE_ENV === \"production\" || _tsInvariant.invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n      this.addQueryListener(queryId, listener);\n      this.fetchQuery(queryId, options).catch(function () {\n        return undefined;\n      });\n      return queryId;\n    };\n\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n      var _this = this;\n\n      var query = _a.query,\n          fetchPolicy = _a.fetchPolicy,\n          variables = _a.variables;\n      query = this.transform(query).document;\n      variables = this.getVariables(query, variables);\n\n      var makeObservable = function (variables) {\n        return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n          if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n            _this.dataStore.markSubscriptionResult(result, query, variables);\n\n            _this.broadcastQueries();\n          }\n\n          if ((0, _apolloUtilities.graphQLResultHasError)(result)) {\n            throw new ApolloError({\n              graphQLErrors: result.errors\n            });\n          }\n\n          return result;\n        });\n      };\n\n      if (this.transform(query).hasClientExports) {\n        var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n        return new Observable(function (observer) {\n          var sub = null;\n          observablePromise_1.then(function (observable) {\n            return sub = observable.subscribe(observer);\n          }, observer.error);\n          return function () {\n            return sub && sub.unsubscribe();\n          };\n        });\n      }\n\n      return makeObservable(variables);\n    };\n\n    QueryManager.prototype.stopQuery = function (queryId) {\n      this.stopQueryNoBroadcast(queryId);\n      this.broadcastQueries();\n    };\n\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n      this.stopQueryInStoreNoBroadcast(queryId);\n      this.removeQuery(queryId);\n    };\n\n    QueryManager.prototype.removeQuery = function (queryId) {\n      this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n      this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n      this.getQuery(queryId).subscriptions.forEach(function (x) {\n        return x.unsubscribe();\n      });\n      this.queries.delete(queryId);\n    };\n\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n      if (optimistic === void 0) {\n        optimistic = true;\n      }\n\n      var _a = observableQuery.options,\n          variables = _a.variables,\n          query = _a.query,\n          fetchPolicy = _a.fetchPolicy,\n          returnPartialData = _a.returnPartialData;\n      var lastResult = observableQuery.getLastResult();\n      var newData = this.getQuery(observableQuery.queryId).newData;\n\n      if (newData && newData.complete) {\n        return {\n          data: newData.result,\n          partial: false\n        };\n      }\n\n      if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n        return {\n          data: undefined,\n          partial: false\n        };\n      }\n\n      var _b = this.dataStore.getCache().diff({\n        query: query,\n        variables: variables,\n        previousResult: lastResult ? lastResult.data : undefined,\n        returnPartialData: true,\n        optimistic: optimistic\n      }),\n          result = _b.result,\n          complete = _b.complete;\n\n      return {\n        data: complete || returnPartialData ? result : void 0,\n        partial: !complete\n      };\n    };\n\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n      var observableQuery;\n\n      if (typeof queryIdOrObservable === 'string') {\n        var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n        process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(foundObserveableQuery, 17) : (0, _tsInvariant.invariant)(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n        observableQuery = foundObserveableQuery;\n      } else {\n        observableQuery = queryIdOrObservable;\n      }\n\n      var _a = observableQuery.options,\n          variables = _a.variables,\n          query = _a.query;\n      return {\n        previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n        variables: variables,\n        document: query\n      };\n    };\n\n    QueryManager.prototype.broadcastQueries = function () {\n      var _this = this;\n\n      this.onBroadcast();\n      this.queries.forEach(function (info, id) {\n        if (info.invalidated) {\n          info.listeners.forEach(function (listener) {\n            if (listener) {\n              listener(_this.queryStore.get(id), info.newData);\n            }\n          });\n        }\n      });\n    };\n\n    QueryManager.prototype.getLocalState = function () {\n      return this.localState;\n    };\n\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n      var _this = this;\n\n      if (deduplication === void 0) {\n        deduplication = this.queryDeduplication;\n      }\n\n      var observable;\n      var serverQuery = this.transform(query).serverQuery;\n\n      if (serverQuery) {\n        var _a = this,\n            inFlightLinkObservables_1 = _a.inFlightLinkObservables,\n            link = _a.link;\n\n        var operation = {\n          query: serverQuery,\n          variables: variables,\n          operationName: (0, _apolloUtilities.getOperationName)(serverQuery) || void 0,\n          context: this.prepareContext((0, _tslib.__assign)((0, _tslib.__assign)({}, context), {\n            forceFetch: !deduplication\n          }))\n        };\n        context = operation.context;\n\n        if (deduplication) {\n          var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n          inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n          var varJson_1 = JSON.stringify(variables);\n          observable = byVariables_1.get(varJson_1);\n\n          if (!observable) {\n            byVariables_1.set(varJson_1, observable = multiplex((0, _apolloLink.execute)(link, operation)));\n\n            var cleanup = function () {\n              byVariables_1.delete(varJson_1);\n              if (!byVariables_1.size) inFlightLinkObservables_1.delete(serverQuery);\n              cleanupSub_1.unsubscribe();\n            };\n\n            var cleanupSub_1 = observable.subscribe({\n              next: cleanup,\n              error: cleanup,\n              complete: cleanup\n            });\n          }\n        } else {\n          observable = multiplex((0, _apolloLink.execute)(link, operation));\n        }\n      } else {\n        observable = Observable.of({\n          data: {}\n        });\n        context = this.prepareContext(context);\n      }\n\n      var clientQuery = this.transform(query).clientQuery;\n\n      if (clientQuery) {\n        observable = asyncMap(observable, function (result) {\n          return _this.localState.runResolvers({\n            document: clientQuery,\n            remoteResult: result,\n            context: context,\n            variables: variables\n          });\n        });\n      }\n\n      return observable;\n    };\n\n    QueryManager.prototype.fetchRequest = function (_a) {\n      var _this = this;\n\n      var requestId = _a.requestId,\n          queryId = _a.queryId,\n          document = _a.document,\n          options = _a.options,\n          fetchMoreForQueryId = _a.fetchMoreForQueryId;\n      var variables = options.variables,\n          _b = options.errorPolicy,\n          errorPolicy = _b === void 0 ? 'none' : _b,\n          fetchPolicy = options.fetchPolicy;\n      var resultFromStore;\n      var errorsFromStore;\n      return new Promise(function (resolve, reject) {\n        var observable = _this.getObservableFromLink(document, options.context, variables);\n\n        var fqrfId = \"fetchRequest:\" + queryId;\n\n        _this.fetchQueryRejectFns.set(fqrfId, reject);\n\n        var cleanup = function () {\n          _this.fetchQueryRejectFns.delete(fqrfId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            subscriptions.delete(subscription);\n          });\n        };\n\n        var subscription = observable.map(function (result) {\n          if (requestId >= _this.getQuery(queryId).lastRequestId) {\n            _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n\n            _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n\n            _this.invalidate(queryId);\n\n            _this.invalidate(fetchMoreForQueryId);\n\n            _this.broadcastQueries();\n          }\n\n          if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n            return reject(new ApolloError({\n              graphQLErrors: result.errors\n            }));\n          }\n\n          if (errorPolicy === 'all') {\n            errorsFromStore = result.errors;\n          }\n\n          if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n            resultFromStore = result.data;\n          } else {\n            var _a = _this.dataStore.getCache().diff({\n              variables: variables,\n              query: document,\n              optimistic: false,\n              returnPartialData: true\n            }),\n                result_1 = _a.result,\n                complete = _a.complete;\n\n            if (complete || options.returnPartialData) {\n              resultFromStore = result_1;\n            }\n          }\n        }).subscribe({\n          error: function (error) {\n            cleanup();\n            reject(error);\n          },\n          complete: function () {\n            cleanup();\n            resolve({\n              data: resultFromStore,\n              errors: errorsFromStore,\n              loading: false,\n              networkStatus: NetworkStatus.ready,\n              stale: false\n            });\n          }\n        });\n\n        _this.setQuery(queryId, function (_a) {\n          var subscriptions = _a.subscriptions;\n          subscriptions.add(subscription);\n        });\n      });\n    };\n\n    QueryManager.prototype.getQuery = function (queryId) {\n      return this.queries.get(queryId) || {\n        listeners: new Set(),\n        invalidated: false,\n        document: null,\n        newData: null,\n        lastRequestId: 1,\n        observableQuery: null,\n        subscriptions: new Set()\n      };\n    };\n\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n      var prev = this.getQuery(queryId);\n      var newInfo = (0, _tslib.__assign)((0, _tslib.__assign)({}, prev), updater(prev));\n      this.queries.set(queryId, newInfo);\n    };\n\n    QueryManager.prototype.invalidate = function (queryId, invalidated) {\n      if (invalidated === void 0) {\n        invalidated = true;\n      }\n\n      if (queryId) {\n        this.setQuery(queryId, function () {\n          return {\n            invalidated: invalidated\n          };\n        });\n      }\n    };\n\n    QueryManager.prototype.prepareContext = function (context) {\n      if (context === void 0) {\n        context = {};\n      }\n\n      var newContext = this.localState.prepareContext(context);\n      return (0, _tslib.__assign)((0, _tslib.__assign)({}, newContext), {\n        clientAwareness: this.clientAwareness\n      });\n    };\n\n    QueryManager.prototype.checkInFlight = function (queryId) {\n      var query = this.queryStore.get(queryId);\n      return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n    };\n\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n      var _this = this;\n\n      var pollInterval = options.pollInterval;\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(pollInterval, 18) : (0, _tsInvariant.invariant)(pollInterval, 'Attempted to start a polling query without a polling interval.');\n\n      if (!this.ssrMode) {\n        var info = this.pollingInfoByQueryId.get(queryId);\n\n        if (!info) {\n          this.pollingInfoByQueryId.set(queryId, info = {});\n        }\n\n        info.interval = pollInterval;\n        info.options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n          fetchPolicy: 'network-only'\n        });\n\n        var maybeFetch_1 = function () {\n          var info = _this.pollingInfoByQueryId.get(queryId);\n\n          if (info) {\n            if (_this.checkInFlight(queryId)) {\n              poll_1();\n            } else {\n              _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n            }\n          }\n        };\n\n        var poll_1 = function () {\n          var info = _this.pollingInfoByQueryId.get(queryId);\n\n          if (info) {\n            clearTimeout(info.timeout);\n            info.timeout = setTimeout(maybeFetch_1, info.interval);\n          }\n        };\n\n        if (listener) {\n          this.addQueryListener(queryId, listener);\n        }\n\n        poll_1();\n      }\n\n      return queryId;\n    };\n\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n      this.pollingInfoByQueryId.delete(queryId);\n    };\n\n    return QueryManager;\n  }();\n\n  var DataStore = function () {\n    function DataStore(initialCache) {\n      this.cache = initialCache;\n    }\n\n    DataStore.prototype.getCache = function () {\n      return this.cache;\n    };\n\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n      if (ignoreErrors === void 0) {\n        ignoreErrors = false;\n      }\n\n      var writeWithErrors = !(0, _apolloUtilities.graphQLResultHasError)(result);\n\n      if (ignoreErrors && (0, _apolloUtilities.graphQLResultHasError)(result) && result.data) {\n        writeWithErrors = true;\n      }\n\n      if (!fetchMoreForQueryId && writeWithErrors) {\n        this.cache.write({\n          result: result.data,\n          dataId: 'ROOT_QUERY',\n          query: document,\n          variables: variables\n        });\n      }\n    };\n\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n      if (!(0, _apolloUtilities.graphQLResultHasError)(result)) {\n        this.cache.write({\n          result: result.data,\n          dataId: 'ROOT_SUBSCRIPTION',\n          query: document,\n          variables: variables\n        });\n      }\n    };\n\n    DataStore.prototype.markMutationInit = function (mutation) {\n      var _this = this;\n\n      if (mutation.optimisticResponse) {\n        var optimistic_1;\n\n        if (typeof mutation.optimisticResponse === 'function') {\n          optimistic_1 = mutation.optimisticResponse(mutation.variables);\n        } else {\n          optimistic_1 = mutation.optimisticResponse;\n        }\n\n        this.cache.recordOptimisticTransaction(function (c) {\n          var orig = _this.cache;\n          _this.cache = c;\n\n          try {\n            _this.markMutationResult({\n              mutationId: mutation.mutationId,\n              result: {\n                data: optimistic_1\n              },\n              document: mutation.document,\n              variables: mutation.variables,\n              updateQueries: mutation.updateQueries,\n              update: mutation.update\n            });\n          } finally {\n            _this.cache = orig;\n          }\n        }, mutation.mutationId);\n      }\n    };\n\n    DataStore.prototype.markMutationResult = function (mutation) {\n      var _this = this;\n\n      if (!(0, _apolloUtilities.graphQLResultHasError)(mutation.result)) {\n        var cacheWrites_1 = [{\n          result: mutation.result.data,\n          dataId: 'ROOT_MUTATION',\n          query: mutation.document,\n          variables: mutation.variables\n        }];\n        var updateQueries_1 = mutation.updateQueries;\n\n        if (updateQueries_1) {\n          Object.keys(updateQueries_1).forEach(function (id) {\n            var _a = updateQueries_1[id],\n                query = _a.query,\n                updater = _a.updater;\n\n            var _b = _this.cache.diff({\n              query: query.document,\n              variables: query.variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n                currentQueryResult = _b.result,\n                complete = _b.complete;\n\n            if (complete) {\n              var nextQueryResult = (0, _apolloUtilities.tryFunctionOrLogError)(function () {\n                return updater(currentQueryResult, {\n                  mutationResult: mutation.result,\n                  queryName: (0, _apolloUtilities.getOperationName)(query.document) || undefined,\n                  queryVariables: query.variables\n                });\n              });\n\n              if (nextQueryResult) {\n                cacheWrites_1.push({\n                  result: nextQueryResult,\n                  dataId: 'ROOT_QUERY',\n                  query: query.document,\n                  variables: query.variables\n                });\n              }\n            }\n          });\n        }\n\n        this.cache.performTransaction(function (c) {\n          cacheWrites_1.forEach(function (write) {\n            return c.write(write);\n          });\n          var update = mutation.update;\n\n          if (update) {\n            (0, _apolloUtilities.tryFunctionOrLogError)(function () {\n              return update(c, mutation.result);\n            });\n          }\n        });\n      }\n    };\n\n    DataStore.prototype.markMutationComplete = function (_a) {\n      var mutationId = _a.mutationId,\n          optimisticResponse = _a.optimisticResponse;\n\n      if (optimisticResponse) {\n        this.cache.removeOptimistic(mutationId);\n      }\n    };\n\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n      this.cache.write({\n        result: newResult,\n        dataId: 'ROOT_QUERY',\n        variables: variables,\n        query: document\n      });\n    };\n\n    DataStore.prototype.reset = function () {\n      return this.cache.reset();\n    };\n\n    return DataStore;\n  }();\n\n  var version = \"2.6.10\";\n  var hasSuggestedDevtools = false;\n\n  var ApolloClient = function () {\n    function ApolloClient(options) {\n      var _this = this;\n\n      this.defaultOptions = {};\n      this.resetStoreCallbacks = [];\n      this.clearStoreCallbacks = [];\n      var cache = options.cache,\n          _a = options.ssrMode,\n          ssrMode = _a === void 0 ? false : _a,\n          _b = options.ssrForceFetchDelay,\n          ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n          connectToDevTools = options.connectToDevTools,\n          _c = options.queryDeduplication,\n          queryDeduplication = _c === void 0 ? true : _c,\n          defaultOptions = options.defaultOptions,\n          _d = options.assumeImmutableResults,\n          assumeImmutableResults = _d === void 0 ? false : _d,\n          resolvers = options.resolvers,\n          typeDefs = options.typeDefs,\n          fragmentMatcher = options.fragmentMatcher,\n          clientAwarenessName = options.name,\n          clientAwarenessVersion = options.version;\n      var link = options.link;\n\n      if (!link && resolvers) {\n        link = _apolloLink.ApolloLink.empty();\n      }\n\n      if (!link || !cache) {\n        throw process.env.NODE_ENV === \"production\" ? new _tsInvariant.InvariantError(4) : new _tsInvariant.InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" + \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" + \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n      }\n\n      this.link = link;\n      this.cache = cache;\n      this.store = new DataStore(cache);\n      this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n      this.queryDeduplication = queryDeduplication;\n      this.defaultOptions = defaultOptions || {};\n      this.typeDefs = typeDefs;\n\n      if (ssrForceFetchDelay) {\n        setTimeout(function () {\n          return _this.disableNetworkFetches = false;\n        }, ssrForceFetchDelay);\n      }\n\n      this.watchQuery = this.watchQuery.bind(this);\n      this.query = this.query.bind(this);\n      this.mutate = this.mutate.bind(this);\n      this.resetStore = this.resetStore.bind(this);\n      this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n      var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n\n      if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n        window.__APOLLO_CLIENT__ = this;\n      }\n\n      if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n        hasSuggestedDevtools = true;\n\n        if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n          if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n            if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Chrome') > -1) {\n              console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n            }\n          }\n        }\n      }\n\n      this.version = version;\n      this.localState = new LocalState({\n        cache: cache,\n        client: this,\n        resolvers: resolvers,\n        fragmentMatcher: fragmentMatcher\n      });\n      this.queryManager = new QueryManager({\n        link: this.link,\n        store: this.store,\n        queryDeduplication: queryDeduplication,\n        ssrMode: ssrMode,\n        clientAwareness: {\n          name: clientAwarenessName,\n          version: clientAwarenessVersion\n        },\n        localState: this.localState,\n        assumeImmutableResults: assumeImmutableResults,\n        onBroadcast: function () {\n          if (_this.devToolsHookCb) {\n            _this.devToolsHookCb({\n              action: {},\n              state: {\n                queries: _this.queryManager.queryStore.getStore(),\n                mutations: _this.queryManager.mutationStore.getStore()\n              },\n              dataWithOptimisticResults: _this.cache.extract(true)\n            });\n          }\n        }\n      });\n    }\n\n    ApolloClient.prototype.stop = function () {\n      this.queryManager.stop();\n    };\n\n    ApolloClient.prototype.watchQuery = function (options) {\n      if (this.defaultOptions.watchQuery) {\n        options = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.defaultOptions.watchQuery), options);\n      }\n\n      if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n        options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n          fetchPolicy: 'cache-first'\n        });\n      }\n\n      return this.queryManager.watchQuery(options);\n    };\n\n    ApolloClient.prototype.query = function (options) {\n      if (this.defaultOptions.query) {\n        options = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.defaultOptions.query), options);\n      }\n\n      process.env.NODE_ENV === \"production\" ? (0, _tsInvariant.invariant)(options.fetchPolicy !== 'cache-and-network', 5) : (0, _tsInvariant.invariant)(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.');\n\n      if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n        options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n          fetchPolicy: 'cache-first'\n        });\n      }\n\n      return this.queryManager.query(options);\n    };\n\n    ApolloClient.prototype.mutate = function (options) {\n      if (this.defaultOptions.mutate) {\n        options = (0, _tslib.__assign)((0, _tslib.__assign)({}, this.defaultOptions.mutate), options);\n      }\n\n      return this.queryManager.mutate(options);\n    };\n\n    ApolloClient.prototype.subscribe = function (options) {\n      return this.queryManager.startGraphQLSubscription(options);\n    };\n\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n      if (optimistic === void 0) {\n        optimistic = false;\n      }\n\n      return this.cache.readQuery(options, optimistic);\n    };\n\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n      if (optimistic === void 0) {\n        optimistic = false;\n      }\n\n      return this.cache.readFragment(options, optimistic);\n    };\n\n    ApolloClient.prototype.writeQuery = function (options) {\n      var result = this.cache.writeQuery(options);\n      this.queryManager.broadcastQueries();\n      return result;\n    };\n\n    ApolloClient.prototype.writeFragment = function (options) {\n      var result = this.cache.writeFragment(options);\n      this.queryManager.broadcastQueries();\n      return result;\n    };\n\n    ApolloClient.prototype.writeData = function (options) {\n      var result = this.cache.writeData(options);\n      this.queryManager.broadcastQueries();\n      return result;\n    };\n\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n      this.devToolsHookCb = cb;\n    };\n\n    ApolloClient.prototype.__requestRaw = function (payload) {\n      return (0, _apolloLink.execute)(this.link, payload);\n    };\n\n    ApolloClient.prototype.initQueryManager = function () {\n      process.env.NODE_ENV === \"production\" || _tsInvariant.invariant.warn('Calling the initQueryManager method is no longer necessary, ' + 'and it will be removed from ApolloClient in version 3.0.');\n      return this.queryManager;\n    };\n\n    ApolloClient.prototype.resetStore = function () {\n      var _this = this;\n\n      return Promise.resolve().then(function () {\n        return _this.queryManager.clearStore();\n      }).then(function () {\n        return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n          return fn();\n        }));\n      }).then(function () {\n        return _this.reFetchObservableQueries();\n      });\n    };\n\n    ApolloClient.prototype.clearStore = function () {\n      var _this = this;\n\n      return Promise.resolve().then(function () {\n        return _this.queryManager.clearStore();\n      }).then(function () {\n        return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n          return fn();\n        }));\n      });\n    };\n\n    ApolloClient.prototype.onResetStore = function (cb) {\n      var _this = this;\n\n      this.resetStoreCallbacks.push(cb);\n      return function () {\n        _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n          return c !== cb;\n        });\n      };\n    };\n\n    ApolloClient.prototype.onClearStore = function (cb) {\n      var _this = this;\n\n      this.clearStoreCallbacks.push(cb);\n      return function () {\n        _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n          return c !== cb;\n        });\n      };\n    };\n\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n      return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n\n    ApolloClient.prototype.extract = function (optimistic) {\n      return this.cache.extract(optimistic);\n    };\n\n    ApolloClient.prototype.restore = function (serializedState) {\n      return this.cache.restore(serializedState);\n    };\n\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n      this.localState.addResolvers(resolvers);\n    };\n\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n      this.localState.setResolvers(resolvers);\n    };\n\n    ApolloClient.prototype.getResolvers = function () {\n      return this.localState.getResolvers();\n    };\n\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n      this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n\n    return ApolloClient;\n  }();\n\n  _exports.ApolloClient = ApolloClient;\n  var _default = ApolloClient; \n\n  _exports.default = _default;\n});\n"],"sourceRoot":""}