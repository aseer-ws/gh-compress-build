{"version":3,"sources":["webpack://react-template/./app/components/Clickable/index.tsx","webpack://react-template/./app/components/LaunchList/index.tsx","webpack://react-template/./app/components/StyledContainer/index.tsx","webpack://react-template/./app/components/ErrorHandler/index.tsx","webpack://react-template/./app/components/LaunchItem/index.tsx","webpack://react-template/./app/images/undraw_page_not_found_re_e9o6.svg","webpack://react-template/./app/containers/NotFoundPage/messages.ts","webpack://react-template/./app/containers/NotFoundPage/index.tsx"],"names":["styled","CustomErrorCard","colors","Container","LaunchList","launchData","loading","launches","get","If","condition","isEmpty","otherwise","data-testid","id","active","For","of","ParentComponent","renderItem","launch","memo","props","maxWidth","CustomCard","color","launchListError","text","LaunchCard","WikiLink","missionName","launchDateUtc","links","memoizedLaunchDate","useMemo","format","Date","onClick","history","T","marginBottom","type","wikipedia","rel","target","e","stopPropagation","href","icon","defineMessages","header","defaultMessage","NotFoundImage","NotFoundContainer","CustomButton","NotFound","messages","src","notFoundImage","preview"],"mappings":"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","file":"583.f50c143900112fade9b9.chunk.js","sourcesContent":["/**\n *\n * Clickable\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport T from '@components/T';\n\nconst StyledClickable = styled.div`\n  color: #1890ff;\n  &:hover {\n    cursor: pointer;\n  }\n`;\ninterface ClickableProps {\n  onClick: React.MouseEventHandler<HTMLDivElement> | undefined;\n  textId: string;\n}\nexport function Clickable({ onClick, textId }: ClickableProps) {\n  return (\n    <StyledClickable data-testid=\"clickable\" onClick={onClick}>\n      {textId && <T id={textId} />}\n    </StyledClickable>\n  );\n}\n\nClickable.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  textId: PropTypes.string.isRequired\n};\n\nexport default Clickable;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Launch } from '@containers/HomeContainer';\nimport { get, isEmpty } from 'lodash-es';\nimport { Card, Skeleton } from 'antd';\nimport { If, T, For, LaunchItem } from '@components';\nimport { colors } from '@app/themes';\n\nconst CustomErrorCard = styled(Card)`\n  && {\n    color: ${colors.secondary};\n    margin: 2rem;\n    background-color: ${colors.secondaryText};\n  }\n`;\n\nconst Container = styled.div`\n  && {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin: 0 auto;\n    background-color: ${colors.secondaryText};\n  }\n`;\n\ninterface LaunchListProps {\n  launchData: { launches?: Launch[] };\n  loading: boolean;\n}\n\nexport function LaunchList({ launchData, loading }: LaunchListProps) {\n  const launches = get(launchData, 'launches', []);\n\n  return (\n    <If\n      condition={!isEmpty(launches) || loading}\n      otherwise={\n        <CustomErrorCard>\n          <T data-testid=\"default-message\" id=\"fallback\" />\n        </CustomErrorCard>\n      }\n    >\n      <Skeleton loading={loading} active>\n        <For of={launches} ParentComponent={Container} renderItem={(launch: Launch) => <LaunchItem {...launch} />} />\n      </Skeleton>\n    </If>\n  );\n}\n\nLaunchList.propTypes = {\n  launchData: PropTypes.shape({\n    launches: PropTypes.arrayOf(\n      PropTypes.shape({\n        missionName: PropTypes.string,\n        launchDateUtc: PropTypes.string,\n        links: PropTypes.shape({\n          wikipedia: PropTypes.string,\n          flickrImages: PropTypes.array\n        })\n      })\n    )\n  }),\n  loading: PropTypes.bool\n};\n\nexport default memo(LaunchList);\n","import styled from 'styled-components';\n\ntype StyledContainerProps = {\n  maxWidth?: number;\n  padding?: number;\n};\n\nconst StyledContainer = styled.div<StyledContainerProps>`\n  max-width: ${(props) => props.maxWidth || 62.5}rem;\n  padding: ${(props) => props.maxWidth}rem;\n  margin: 1rem auto;\n`;\n\nexport default StyledContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Card } from 'antd';\nimport { T, If } from '@components';\n\nconst CustomCard = styled(Card)`\n  && {\n    margin: 20px 0;\n    color: ${(props) => props.color};\n  }\n`;\n\ninterface ErrorHandlerTypes {\n  loading: boolean;\n  launchListError?: string;\n}\n\nexport function ErrorHandler({ loading, launchListError }: ErrorHandlerTypes) {\n  if (!loading) {\n    return (\n      <If condition={launchListError} otherwise={<T data-testid=\"default-message\" id={launchListError} />}>\n        <CustomCard data-testid=\"error-card\">\n          <T data-testid=\"error-message\" text={launchListError} />\n        </CustomCard>\n      </If>\n    );\n  } else {\n    return null;\n  }\n}\n\nErrorHandler.propTypes = {\n  loading: PropTypes.bool,\n  launchListError: PropTypes.string\n};\n\nexport default ErrorHandler;\n","import React, { useMemo } from 'react';\nimport { Launch } from '@app/containers/HomeContainer';\nimport { Button, Card } from 'antd';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport If from '@components/If';\nimport { T } from '@components/T';\nimport isEmpty from 'lodash-es/isEmpty';\nimport { colors } from '@app/themes';\nimport { GlobalOutlined } from '@ant-design/icons';\nimport history from '@app/utils/history';\nimport { format } from 'date-fns';\n\nconst LaunchCard = styled(Card)`\n  && {\n    cursor: pointer;\n    margin: 1rem 0;\n    color: ${(props) => props.color};\n    background-color: ${colors.cardBg};\n    &:hover {\n      box-shadow: inset 0 0 10px -5px rgba(0, 0, 0, 0.6);\n    }\n  }\n`;\n\nconst WikiLink = styled(Button)`\n  && {\n    padding: 0;\n    display: flex;\n    align-items: center;\n    color: ${colors.text};\n    width: max-content;\n    &:hover {\n      opacity: 0.6;\n    }\n  }\n`;\n\nfunction LaunchItem({ missionName, launchDateUtc, links, id }: Launch) {\n  const goToLaunch = () => history.push(`/launch/${id}`);\n\n  const memoizedLaunchDate = useMemo(\n    () => format(new Date(launchDateUtc), 'eee, do MMMM yyyy, hh:mm a'),\n    [launchDateUtc]\n  );\n\n  return (\n    <LaunchCard data-testid=\"launch-item\" onClick={goToLaunch}>\n      <If condition={!isEmpty(missionName)}>\n        <T data-testid=\"mission-name\" marginBottom={1.5} type=\"subheading\" text={missionName} />\n      </If>\n      <If condition={!isEmpty(launchDateUtc)}>\n        <T text={memoizedLaunchDate} />\n      </If>\n      <If condition={!isEmpty(links)}>\n        <If condition={!isEmpty(links.wikipedia)}>\n          <WikiLink\n            data-testid=\"wiki-link\"\n            type=\"link\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            onClick={(e) => e.stopPropagation()}\n            href={links.wikipedia}\n            icon={<GlobalOutlined />}\n          >\n            Wikipedia\n          </WikiLink>\n        </If>\n      </If>\n    </LaunchCard>\n  );\n}\n\nLaunchItem.propTypes = {\n  id: PropTypes.string,\n  missionName: PropTypes.string,\n  launchDateUtc: PropTypes.string,\n  links: PropTypes.shape({\n    wikipedia: PropTypes.string,\n    flickrImages: PropTypes.arrayOf(PropTypes.string)\n  })\n};\n\nexport default LaunchItem;\n","export default __webpack_public_path__ + \"877828cf237ff4dfb9008a2b201a17a3.svg\";","/*\n * NotFoundPage Messages\n *\n * This contains all the text for the NotFoundPage container.\n */\nimport { defineMessages } from 'react-intl';\n\nexport const scope = 'app.containers.NotFoundPage';\n\nexport default defineMessages({\n  header: {\n    id: `${scope}.header`,\n    defaultMessage: 'Oops you ran out of Oxygen!, dont worry, you can go back home and start exploring again!'\n  }\n});\n","/**\n * NotFoundPage\n *\n * This is the page we show when the user visits a url that doesn't have a route\n *\n */\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Image } from 'antd';\nimport notFoundImage from '@images/undraw_page_not_found_re_e9o6.svg';\nimport { T } from '@components';\nimport messages from './messages';\nimport { colors } from '@app/themes';\nimport history from '@utils/history';\n\nconst NotFoundImage = styled(Image)`\n  && {\n    height: 60%;\n    width: 60%;\n    margin: 25%;\n  }\n`;\n\nconst NotFoundContainer = styled.div`\n  && {\n    display: flex;\n    flex-direction: column;\n    max-width: 30%;\n    justify-content: center;\n    align-items: center;\n    margin: 5% auto;\n  }\n`;\n\nconst CustomButton = styled.button`\n  && {\n    background-color: ${colors.primary};\n    color: ${colors.secondaryText};\n    max-width: 30%;\n    margin: 2%;\n    cursor: pointer;\n  }\n`;\nexport default function NotFound() {\n  return (\n    <NotFoundContainer>\n      <T marginBottom={0.5} data-testid=\"details\" type=\"heading\" text={messages.header.defaultMessage} />\n      <CustomButton data-testid=\"back-button\" onClick={() => history.push('/')}>\n        Go Back\n      </CustomButton>\n      <NotFoundImage src={notFoundImage} preview={false} />\n    </NotFoundContainer>\n  );\n}\n"],"sourceRoot":""}